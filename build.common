oflags = [ "-g"; "-w"; "+a-48-4-44"; "-warn-error"; "+a-44"  ];
nowarnings = [ "-warn-error"; "-a" (* bad idea ; "-w"; "-a" *) ];
ocaml.asmlink = ["-g"];

ocaml.bytecomp = oflags;
ocaml.asmcomp = oflags;

pp_js = { pp = [ "%{js_of_ocaml-ppx_SRC_DIR}%/ppx.exe"; "--as-pp" ] };

pp_pgocaml = { pp =  [ "%{pgocaml_ppx_SRC_DIR}%/ppx.exe"; "--as-pp" ] };

function js_program(name, file, libs){
  OCaml.program(name, ocaml + {
    has_asm = false;
    requires = libs;
    files = [ file, pp_js ];
    build_rules = [
      "%{" + name + "_FULL_DST_DIR}%/" + name + ".js", {
        build_target = true;
        sources = [ "%{" + name + "_FULL_DST_DIR}%/" + name + ".byte" ];
        commands = [
          OCaml.system([
            "js_of_ocaml";
            "%{" + name + "_FULL_DST_DIR}%/" + name + ".byte";
    ])]}]
  });
}

OCaml.library("skeleton-config", ocaml+{
  files = [
    "sConfig.ml", {
      ocp2ml = true;
      database = database;
      env_strings = [
        "database";
        "ocp::commit";
        "ocp::dates";
      ]
    }];
});

build_common_loaded = true ;
